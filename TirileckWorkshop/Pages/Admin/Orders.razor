@page "/adminka/orders"

@using TirileckWorkshop.Data.Dto
@using TirileckWorkshop.Data.Enums
@using TirileckWorkshop.Services
@layout AdminLayout

<AdminPageHeader Title="Заказы"/>

<Table Item="OrderDto" 
       Items="_orders" 
       PageSize="10" 
       @ref="table" 
       EditMode="@TableEditMode.Popup"
       EditPopupMutator="EditPopupOptions"
       OnItemEdited="OnItemEdit"
       AddItemFactory="AddItem">
    <HeaderTemplate>
        <strong>Заказы</strong>
        <Button @onclick="ShowModal" 
                BackgroundColor="TablerColor.Primary"
                style="height: 20px; margin-left: 5px; font-size: 11px">Добавить</Button>
    </HeaderTemplate>

    <ChildContent>
        <Column Item="OrderDto" Property="e=>e.FIO" Title="ФИО" Searchable>
            <EditorTemplate>
                <input disabled type="text" class="form-control" @bind-value="@context.FIO" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.Email" Title="Email" Searchable>
            <EditorTemplate>
                <input disabled type="text" class="form-control" @bind-value="@context.Email" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.PhoneNumber" Title="Телефон" Sortable Searchable>
            <EditorTemplate>
                <input disabled type="text" class="form-control" @bind-value="@context.PhoneNumber" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.DeviceType.Name" Title="Тип устройства" Searchable>
            <EditorTemplate>
                <input disabled type="text" class="form-control" @bind-value="@context.DeviceType.Name" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.DeviceName" Title="Иной тип устройства" >
            <EditorTemplate>
                <input disabled type="text" class="form-control" @bind-value="@context.DeviceName" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.OrderStatus" Title="Статус заказа" >
            <EditorTemplate>
                <Select Items="EnumHelper.GetList<OrderStatus>()" @bind-SelectedValue="@context.OrderStatus" TextExpression="e=> e.GetName()" ValueExpression="e=> e" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.SpareCost" Title="Цена запчастей" >
            <EditorTemplate>
                <input type="number" step=".01"  class="form-control" @bind-value="@context.SpareCost" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.AllCost" Title="Общая цена" >
            <EditorTemplate>
                <input type="number" step=".01" class="form-control" @bind-value="@context.AllCost" />
            </EditorTemplate>
        </Column>
        <Column Item="OrderDto" Property="e=>e.ProfitCost" Title="Профит" >
            <EditorTemplate>
                <input disabled type="number" class="form-control" @bind-value="@context.ProfitCost" />
            </EditorTemplate>
        </Column>


        <Column Item="OrderDto"  Title="" ActionColumn Width="130px">
            <Template>
                    <span @onclick="(() => table.EditItem(context))" @onclick:stopPropagation>
                        <span class="clickable-text">Изменить</span>
                    </span>
            </Template>
            <EditorTemplate>
                
            </EditorTemplate>
        </Column>
    </ChildContent>

    <DetailsTemplate>
        <Card>
            <CardHeader>
                Трек код
            </CardHeader>

            <CardBody>
                @context.TrackCode.ToString()
            </CardBody>
        </Card>
        <Card>
            <CardHeader>
                Описание проблемы
            </CardHeader>

            <CardBody>
                @context.Description
            </CardBody>
        </Card>
    </DetailsTemplate>
</Table>


@code {
    List<OrderDto> _orders = new(); 
    private Table<OrderDto> table;
    
    [Inject] public OrderService OrdersService { get; set; }
    [Inject] TabBlazor.Services.TablerService TablerService { get; set; }
    [Inject] IModalService ModalService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _orders = await GetOrders();
        
        await base.OnInitializedAsync();
    }

    async Task<List<OrderDto>> GetOrders()
    {
        return await OrdersService.GetOrders();
    }
    
    private async Task OnItemEdit(OrderDto order)
    {
        await OrdersService.EditOrder(order);
    }

    private Task<OrderDto> AddItem()
    {
        return Task.FromResult(new OrderDto());
    }
    
    //This is optional if you like to control the edit popup.
    private void EditPopupOptions(TableEditPopupOptions<OrderDto> options)
    {
        if (options.IsAddInProgress)
        {
            options.Title = "Добавление нового заказа";
        }
        else
        {
            options.Title = $"Изменение заказа пользователя {options.CurrentEditItem.FIO}";
        }
        options.ModalOptions.Draggable = true;
    }
    
    
    protected async Task ShowModal()
    {
        AddOrderDto dto = new();
        var component = new RenderComponent<AddOrderModal>().Set<AddOrderDto>(e => e.Model, dto);
        var result = await ModalService.ShowAsync("Добавление заказа", component, new ModalOptions { Size = ModalSize.Large });

        if (!result.Cancelled)
        {
            var addedUser = await OrdersService.AddOrder(dto);
            _orders = await GetOrders();
            await table.Refresh();
        }
    }
}