@using TirileckWorkshop.Data.Dto
@using TirileckWorkshop.Services
@using Tabler.Docs

@if (_initialized)
{
    <div class="card">
        <div class="card-body" style="position: relative;">
            <div class="d-flex align-items-center">
                <div class="subheader">Чистая прибыль</div>
                <div class="ms-auto lh-1">
                    <a class="text-muted" aria-haspopup="true" aria-expanded="false">
                        Данные за последний год
                    </a>
                </div>
            </div>
            <div class="d-flex align-items-baseline">
                <div class="h1 mb-3 me-2">@_orders.Sum(x => x.ProfitCost)</div>
                <div class="me-auto">
                    <span class="@(_percentage < 0 ? "text-red" : "text-green") d-inline-flex align-items-center lh-1">
                        @_percentage% 
                        @if (_percentage < 0)
                        {
                            <Icon class="icon" IconType="@TablerIcons.Trending_down"></Icon>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon ms-1" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><polyline points="3 17 9 11 13 15 21 7"></polyline><polyline points="14 7 21 7 21 14"></polyline></svg>
                        }
                    </span>
                </div>
            </div>
            <div >
                <ApexChart TItem="OrderDto"
                           Height="300"

                           XAxisType="XAxisType.Datetime"
                           Options="GetOptions()">

                    <ApexPointSeries TItem="OrderDto"
                                     Items="_orders"
                                     Name="Чистая прибыль"
                                     SeriesType="SeriesType.Bar"
                                     XValue="@(e => e.CreateDate)"
                                     YAggregate="@(e => Decimal.Round(e.Sum(e => e.ProfitCost)))"
                                     OrderBy="e => e.X"/>

                    <ApexPointSeries TItem="OrderDto"
                                     Items="_orders"
                                     Name="Затраты на материалы"
                                     SeriesType="SeriesType.Bar"
                                     XValue="@(e => e.CreateDate)"
                                     YAggregate="@(e => Decimal.Round(e.Where(x => x.SpareCost.HasValue).Sum(e => e.SpareCost.Value)))"
                                     OrderBy="e => e.X"/>
                </ApexChart>
            </div>
        </div>
    </div>
}

@code {
    bool _initialized = false;
    List<OrderDto> _orders = new();
    decimal _percentage;
    
    [Inject] public OrderService OrdersService { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _orders = await GetOrders();
        var yearBefore = DateTime.Now.AddYears(-1);
        _orders = _orders.Where(x => x.CreateDate >= yearBefore).ToList();
        foreach (var order in _orders)
            order.CreateDate = GetFirstDayOfDate(order.CreateDate);

        _percentage = Decimal.Round(GetPercentage());
        
        await base.OnInitializedAsync();
        _initialized = true;
    }

    async Task<List<OrderDto>> GetOrders()
    {
        return await OrdersService.GetOrders();
    }

    DateTime GetFirstDayOfDate(DateTime date)
    {
        var newDate = new DateTime(date.Year, date.Month,DateTime.DaysInMonth(date.Year, date.Month));
        return newDate;
    }

    private ApexCharts.ApexChartOptions<OrderDto> GetOptions()
    {
        var options = new ApexCharts.ApexChartOptions<OrderDto>();
        options.Colors = new List<string> { "#206bc4" };
        options.Chart = new Chart { Sparkline = new ChartSparkline { Enabled = true } };
        options.Stroke = new Stroke { Width = 3, DashArray = new int[] { 0, 3 }, Colors = new List<string> { "#206bc4", "#999999" } };
        return options;
    }

    private decimal GetPercentage()
    {
        var currentFirstDayOfMonth = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
        var lastMonthFirstDay = currentFirstDayOfMonth.AddMonths(-1);
        var lastMonthOrders = _orders.Where(x => x.CreateDate.Month == lastMonthFirstDay.Month && x.CreateDate.Year == lastMonthFirstDay.Year);
        var currentMonthOrders = _orders.Where(x => x.CreateDate.Month == currentFirstDayOfMonth.Month && x.CreateDate.Year == currentFirstDayOfMonth.Year);
        var sumProfitLastMonth = lastMonthOrders.Any() ? lastMonthOrders.Sum(x => x.ProfitCost) : 0;
        var sumProfitCurrentMonth = currentMonthOrders.Any() ? currentMonthOrders.Sum(x => x.ProfitCost) : 0;
        if (sumProfitLastMonth > sumProfitCurrentMonth)
        {
            if (sumProfitCurrentMonth == 0)
                return -100;
            return (100 -(sumProfitCurrentMonth/sumProfitLastMonth) * 100) * -1;
        } else if (sumProfitLastMonth < sumProfitCurrentMonth)
        {
            if (sumProfitLastMonth == 0)
                return 100;
            var sots = (System.Decimal.Round(sumProfitCurrentMonth / sumProfitLastMonth) - 1) * 100;
            var ost = sumProfitCurrentMonth % sumProfitLastMonth;
            var ost2 = (ost / sumProfitLastMonth) * 100;
            return ost2 + sots;
        }
        else
        {
            return 0;
        }
    }
}